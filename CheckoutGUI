import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
public class CheckoutGUI extends JFrame implements ActionListener
{
private CheckOut checkout= new CheckOut();
private final static int INFO_SIZE = 30;
private JTextField _info = new JTextField("Number of Items: 0",100);
private String bnames[]={ "Ice Cream", "Candy", "Cookies", "Sundae"};
private String lnames[] =
{
"Name", "Price", "Weight", "Price/lbs", "Price/doz", "Number", "Topping",
"Topping Cost"
};
private String bnames2[]={"Enter", "Total"};
private String mnames[]={"Reset", "Exit"};
private JButton buttons[];
private JLabel labels[];
private JButton buttons2[];
private JTextField tfields[];
private JMenuItem menuitems[];
private JMenuBar bar = new JMenuBar();
private JMenu file = new JMenu("Hello from Charlie");
private int selecteditem=0;
private void setlabels()
{
labels = new JLabel[lnames.length];
for (int i =0; i < lnames.length; i++)
{
labels[i] = new JLabel(lnames[i]);
labels[i].setHorizontalAlignment(SwingConstants.CENTER);
labels[i].setEnabled(false);
}
}
private void setbuttons()
{
buttons = new JButton[bnames.length];
for (int i=0; i< bnames.length; i++)
{
buttons[i] = new JButton( bnames[i]);
buttons[i].addActionListener(this);
}
}
private void settextfield()
{
tfields = new JTextField[lnames.length];
for (int i=0; i < lnames.length; i++)
{
	tfields[i] = new JTextField(INFO_SIZE);
	tfields[i].setEnabled(false);
	}
	}
	private void setbutton2(){
	buttons2 = new JButton[bnames2.length];
	for (int i =0; i < bnames2.length; i++)
	{
	buttons2[i] = new JButton(bnames2[i]);
	buttons2[i].addActionListener(this);
	}
	}
	private void setmenubar()
	{
	menuitems = new JMenuItem[mnames.length];
	for (int i=0; i <mnames.length; i++)
	{
	menuitems[i] = new JMenuItem(mnames[i]);
	menuitems[i].addActionListener(this);
	}
	}
	public CheckoutGUI(CheckOut checkout)
	{
	super("CheckoutGUI");
	checkout = this.checkout;
	setSize(600,300);
	setLocation(200,200);
	setlabels();
	setbuttons();
	settextfield();
	setbutton2();
	setmenubar();
	ContainerSetup();
	show();
	}
	public void actionPerformed( ActionEvent e)
	{
	Object source = e.getSource();
	if (source == menuitems[0])
	{
	checkout.clear();
	_info.setText("Number of Items: 0");
	resetinfo();
	inablebuttonsAll();
	disableinfoAll();
	}
	else if (source == menuitems[1])
	{
		System.exit(1);
	}
	else if (source == buttons[0]) 
	{
	inableinfo(0); 
	inableinfo(1); 
	selecteditem=0;
	}
	else if (source == buttons[1]) 
	{
	inableinfo(0); 
	inableinfo(3); 
	inableinfo(2); 
	selecteditem=1;
	}
	else if (source == buttons[2]) 
	{
	inableinfo(0); 
	inableinfo(4); 
	inableinfo(5); 
	selecteditem=2;
	}
	else if (source == buttons[3]) 
	{
	inableinfo(0); 
	inableinfo(1); 
	inableinfo(6); 
	inableinfo(7); 
	selecteditem=3;
	}
	else if (source == buttons2[0]) 
	{
	inablebuttonsAll();
	disableinfoAll();
	try
	{
	switch (selecteditem)
	{
	case 0:
	checkout.enterItem( new lceCream(
	tfields[0].getText(),
	Integer.parseInt(tfields[1].getText())
	));
	break;
	case 1: 
	checkout.enterItem( new Candy(
	tfields[0].getText(),
	Double.parseDouble(tfields[2].getText()),
	Integer.parseInt(tfields[3].getText())
	));
	break;
	case 2: 
	checkout.enterItem( new Cookie(
	tfields[0].getText(),
	Integer.parseInt(tfields[5].getText()),
	Integer.parseInt(tfields[4].getText())
	));
	break;
	case 3: 
	checkout.enterItem( new Sundae(
	tfields[0].getText(),
	Integer.parseInt(tfields[1].getText()),
	tfields[6].getText(),
	Integer.parseInt(tfields[7].getText())
	));
	break;
	} 
	_info.setText("Number of items: "+checkout.numberOfItems());
	} 
	catch (Exception ref)
	{
	_info.setText("Invalid Entry, Number of Items: "
	+ checkout.numberOfItems()
	);
	}
	finally
	{
	resetinfo();
	}
	}
	else if (source == buttons2[1]) 
	{
	ReceiptGUI r = new ReceiptGUI(checkout.toString());
	checkout.clear();
	_info.setText("Number of Items: 0");
	resetinfo();
	inablebuttonsAll();
	disableinfoAll();
	}
	for (int i=0; i <buttons.length; i++) 
	{
	if (source == buttons[i])
	{
	disablebuttons(i);
	}
	}
	}
	private void resetinfo()
	{
		for (int i=0; i< lnames.length; i++)
		{
		tfields[i].setText("");
		}
		}
		private void disablebuttons(int b)
		{
		for (int i=0; i< buttons.length; i++)
		{
		if (b != i) buttons[i].setEnabled(false);
		}
		}
		private void inablebuttonsAll()
		{
		for (int i=0; i< buttons.length; i++)
		{
		buttons[i].setEnabled(true);
		}
		}
		private void inableinfo(int b)
		{
		for (int i=0; i< lnames.length; i++)
		{
		if (b ==i)
		{
		labels[i].setEnabled(true);
		tfields[i].setEnabled(true);
		}
		} 
		}
		private void disableinfoAll()
		{
		for (int i=0; i <lnames.length; i++)
		{
		labels[i].setEnabled(false);
		tfields[i].setEnabled(false);
		}
		}
		class ReceiptGUI
		{
		private JTextArea text = new JTextArea();
		private JFrame receipt = new JFrame("Receipt");
		public ReceiptGUI(String info)
		{
		Container p = receipt.getContentPane();
		receipt.setSize(235,600);
		p.add(new JScrollPane(text),BorderLayout.CENTER);
		text.setText(info);
		text.setEditable(false);
		text.setFont(new Font("Monospaced",Font.PLAIN,12));
		receipt.show();
		}
		}
		private void ContainerSetup()
		{
		Container c = getContentPane();
		for (int i=0; i< mnames.length; i++) file.add(menuitems[i]);
		bar.add(file);
		setJMenuBar(bar);
		_info.setEditable(false);
		_info.setBackground(Color.white);
		c.add(_info,BorderLayout.NORTH);
		JPanel spanel = new JPanel();
		for (int i=0; i < bnames2.length; i++) spanel.add(buttons2[i]);
		c.add(spanel,BorderLayout.SOUTH);
		JPanel cpanel = new JPanel();
		cpanel.setBorder(BorderFactory.createLoweredBevelBorder());
		cpanel.setLayout(new GridLayout(lnames.length,2));
		for (int i=0; i < lnames.length; i++)
		{
		cpanel.add(labels[i]);
		cpanel.add(tfields[i]);
		}
		c.add(cpanel,BorderLayout.CENTER);
		JPanel wpanel = new JPanel();
		wpanel.setLayout(new GridLayout(4,0));
		for (int i=0; i< bnames.length; i++) wpanel.add(buttons[i]);
		c.add(wpanel,BorderLayout.WEST);
		}
		public static void main (String args[] )
		{
		CheckoutGUI app = new CheckoutGUI(new CheckOut());
		app.addWindowListener( new WindowAdapter()
		{
		public void windowClosing(WindowEvent e) { System.exit(0); }
		});
		}
		} 
	
